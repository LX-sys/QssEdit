# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QssEdit.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys

from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QApplication, QMainWindow, QShortcut
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal,QPoint
from PyQt5.QtWidgets import QPushButton,QFrame,QWidget,QGridLayout,QLineEdit,QSpinBox,QLabel

from GuiLib import QSSEdit


# 控件外壳
class ControlShell(QFrame):
    objed = pyqtSignal(dict)
    def __init__(self,control_name:str=None,alias:str=None,*args,**kwargs):
        super().__init__(*args,**kwargs)
        # 控件名称,和别名
        self.__control_name = (control_name,alias)
        self.__obj = {"self":self}

        self.gridLayout = QGridLayout(self)
        self.setObjectName("ABC")

        if control_name and alias:
            self.createControl(control_name,alias)

    def activate(self,b:bool):
        if b:
            self.setStyleSheet('''
            QFrame#ABC{
            border:1px solid rgb(0, 0, 255);
            }
            ''')
        else:
            self.setStyleSheet('''
                        QFrame#ABC{
                        border:1px solid gray;
                        }
                        ''')

    def name(self)->tuple:
        return self.__control_name

    # 当前控件对象
    def getObj(self)->QWidget:
        return self.__obj[self.name()[0]][0][self.name()[0]]

    def getSelf(self)->QWidget:
        return self

    def createControl(self,name:str,alias:str):
        p = None
        if name == "QPushButton":
            p = QPushButton(self)
            p.setText("test")

        if name == "QLineEdit":
            p = QLineEdit(self)
            p.resize(100,30)

        if p:
            if p not in self.__obj:
                self.__obj[name] = [{name:p,"alias":alias}]
            else:
                self.__obj[name].append({name:p,"alias":alias})
            self.gridLayout.addWidget(p, 1, 1, 1, 1)

    # 拖动窗口
    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.m_flag = True
            self.m_Position = event.globalPos() - self.pos() #获取鼠标相对窗口的位置
            event.accept()
            self.setCursor(QtCore.Qt.ClosedHandCursor)#更改鼠标图标

    def mouseMoveEvent(self, QMouseEvent):
        if QtCore.Qt.LeftButton and self.m_flag:
            self.move(QMouseEvent.globalPos() - self.m_Position)#更改窗口位置
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_flag = False
        self.setCursor(QtCore.Qt.ArrowCursor)

# 控件群
class ControlGroup:
    def __init__(self):
        '''
        {
            控件名称: [控件外壳,控件外壳,控件外壳]
        }

        '''
        self.__group = dict()
        self.curr_activate_control = None

    # 设置控件外壳为激活状态,其他控件外壳设置为非激活状态
    def setActivateControl(self,name:str,alias:str=None):
        if name not in self.__group:
            return
        c_list = self.getControlList(name)
        for c in c_list:
            # print(c)
            if c.name()[1] == alias:
                self.curr_activate_control = c
            else:
                c.activate(False)

    # 获取当前的激活的控件
    def getActivateControl(self)->ControlShell:
        return self.curr_activate_control

    # 添加控件外壳
    def addControlShell(self,control_shell:ControlShell):
        name,alias = control_shell.name()
        if self.is_alias(name,alias):
            raise Exception("别名重复")

        if name not in self.__group:
            self.__group[name] = [control_shell]
        else:
            self.__group[name].append(control_shell)

    # 判断相同控件下是否有别名重复
    def is_alias(self,name:str,alias:str)->bool:
        if name not in self.__group:
            return False

        c_list = self.getControlList(name)
        for c in c_list:
            if c.name()[1] == alias:
                return True
        return False

    # 获取控件列表
    def getControlList(self,name:str)->list:
        if name not in self.__group:
            return []
        return self.__group[name]

    # 获取控件外壳
    def getControlShell(self,name:str,alias:str=None)->ControlShell:
        if name not in self.__group:
            return None

        c_list = self.getControlList(name)
        for c in c_list:
            if c.name()[1] == alias:
                return c

class QssEdit(QMainWindow):
    def __init__(self, *args,**kwargs) -> None:
        super().__init__(*args,**kwargs)

        # 控件组
        self.__control_group = ControlGroup()

        # 控件字典
        self.__control_dict = dict()

        self.setupUi()

        self.myEvent()

    # 切换控件
    def controlSwitch(self,cname:tuple):
        print("controlSwitch",cname)
        c_name,name = cname

    def setupUi(self):
        self.setObjectName("self")
        self.resize(1121, 748)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.code_edit = QSSEdit(self.centralwidget)
        self.code_edit.setMinimumSize(QtCore.QSize(521, 0))
        self.code_edit.setObjectName("code_edit")
        self.horizontalLayout.addWidget(self.code_edit)


        self.preview = QtWidgets.QStackedWidget(self.centralwidget)
        self.preview.setObjectName("preview")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")

        # ---------------
        self.ss = ControlShell("QPushButton","btn",self.page)
        self.ss.setGeometry(90, 90, 120, 80)
        self.ss.activate(True)
        self.__control_group.addControlShell(self.ss)
        self.__control_group.setActivateControl(*self.ss.name())


        self.pp = ControlShell("QPushButton","btn2",self.page)
        self.pp.activate(True)
        self.__control_group.addControlShell(self.pp)
        self.__control_group.setActivateControl(*self.pp.name())
        #-----------------

        self.preview.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.preview.addWidget(self.page_2)
        self.horizontalLayout.addWidget(self.preview)
        self.setCentralWidget(self.centralwidget)


        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1121, 23))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)

        # 状态栏
        self.myStatusbar()

        self.preview.setCurrentIndex(0)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def w_Event(self,w):
        w = int(w)
        obj = self.__control_group.getActivateControl().getObj()
        obj.resize(w,obj.height())
        obj.setMinimumSize(w,obj.height())
        win = self.__control_group.getActivateControl().getSelf()
        win.resize(w+1,win.height())


    def h_Event(self,h):
        h = int(h)
        obj = self.__control_group.getActivateControl().getObj()
        obj.resize(h, obj.height())
        obj.setMinimumSize(h, obj.height())
        win = self.__control_group.getActivateControl().getSelf()
        win.resize(win.width(), h + 1)

    def myStatusbar(self):
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.statusbar.addWidget(QLabel("{}".format(self.__control_group.getActivateControl().name()[1])))

        self.statusbar.addWidget(QLabel("W"))
        self.w = QSpinBox()
        self.statusbar.addWidget(self.w)
        self.h = QSpinBox()
        self.statusbar.addWidget(QLabel("H"))
        self.statusbar.addWidget(self.h)

        self.w.setMinimum(1)
        self.h.setMinimum(1)
        self.w.setMaximum(500)
        self.h.setMaximum(500)

        obj = self.__control_group.getActivateControl().getObj()
        self.w.setValue(obj.width())
        self.h.setValue(obj.height())

        self.w.textChanged.connect(self.w_Event)
        self.h.textChanged.connect(self.h_Event)

    def textChanged_Event(self):
        style = self.code_edit.text()
        try:
            obj = self.__control_group.getActivateControl().getObj()
            obj.setStyleSheet(style)
        except Exception as e:
            print(e)

    def myEvent(self):
        self.code_edit.textChanged.connect(self.textChanged_Event)

    def find_Event(self):
        pass

    def save_Event(self):
        print("save")

    # 快捷键
    def myShortcuts(self):
        QShortcut(QKeySequence(self.tr("Ctrl+F")), self, self.find_Event)
        QShortcut(QKeySequence(self.tr("Ctrl+S")), self, self.save_Event)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "QSS编辑器"))

if __name__ == '__main__':
    # a = ControlShell("QPushButton","btn",None)
    # print(a)
    app = QApplication(sys.argv)

    win = QssEdit()
    win.show()

    sys.exit(app.exec_())
    